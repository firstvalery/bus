/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.bus.postgres.Indexes;
import ru.smartsarov.bus.postgres.Keys;
import ru.smartsarov.bus.postgres.Public;
import ru.smartsarov.bus.postgres.tables.records.ConductorScheduleRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConductorSchedule extends TableImpl<ConductorScheduleRecord> {

    private static final long serialVersionUID = -765036811;

    /**
     * The reference instance of <code>public.conductor_schedule</code>
     */
    public static final ConductorSchedule CONDUCTOR_SCHEDULE = new ConductorSchedule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConductorScheduleRecord> getRecordType() {
        return ConductorScheduleRecord.class;
    }

    /**
     * The column <code>public.conductor_schedule.conductor_id</code>.
     */
    public final TableField<ConductorScheduleRecord, Integer> CONDUCTOR_ID = createField("conductor_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('conductor_schedule_conductor_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.conductor_schedule.date</code>.
     */
    public final TableField<ConductorScheduleRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.conductor_schedule.shift_type_id</code>.
     */
    public final TableField<ConductorScheduleRecord, Short> SHIFT_TYPE_ID = createField("shift_type_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.conductor_schedule.ready_type_id</code>.
     */
    public final TableField<ConductorScheduleRecord, Short> READY_TYPE_ID = createField("ready_type_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.conductor_schedule.removed</code>.
     */
    public final TableField<ConductorScheduleRecord, Short> REMOVED = createField("removed", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * Create a <code>public.conductor_schedule</code> table reference
     */
    public ConductorSchedule() {
        this(DSL.name("conductor_schedule"), null);
    }

    /**
     * Create an aliased <code>public.conductor_schedule</code> table reference
     */
    public ConductorSchedule(String alias) {
        this(DSL.name(alias), CONDUCTOR_SCHEDULE);
    }

    /**
     * Create an aliased <code>public.conductor_schedule</code> table reference
     */
    public ConductorSchedule(Name alias) {
        this(alias, CONDUCTOR_SCHEDULE);
    }

    private ConductorSchedule(Name alias, Table<ConductorScheduleRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConductorSchedule(Name alias, Table<ConductorScheduleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ConductorSchedule(Table<O> child, ForeignKey<O, ConductorScheduleRecord> key) {
        super(child, key, CONDUCTOR_SCHEDULE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_CONDUCTOR_SCHEDULE_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ConductorScheduleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CONDUCTOR_SCHEDULE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConductorScheduleRecord> getPrimaryKey() {
        return Keys.PK_CONDUCTOR_SCHEDULE_TBL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConductorScheduleRecord>> getKeys() {
        return Arrays.<UniqueKey<ConductorScheduleRecord>>asList(Keys.PK_CONDUCTOR_SCHEDULE_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ConductorScheduleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ConductorScheduleRecord, ?>>asList(Keys.CONDUCTOR_SCHEDULE__FK_CONDUCTOR_SCHEDULE_TBL_CONDUCTOR_ID, Keys.CONDUCTOR_SCHEDULE__FK_CONDUCTOR_SCHEDULE_TBL_SHIFT_TYPE_ID, Keys.CONDUCTOR_SCHEDULE__FK_CONDUCTOR_SCHEDULE_TBL_READY_TYPE_ID);
    }

    public Conductor conductor() {
        return new Conductor(this, Keys.CONDUCTOR_SCHEDULE__FK_CONDUCTOR_SCHEDULE_TBL_CONDUCTOR_ID);
    }

    public RbShiftType rbShiftType() {
        return new RbShiftType(this, Keys.CONDUCTOR_SCHEDULE__FK_CONDUCTOR_SCHEDULE_TBL_SHIFT_TYPE_ID);
    }

    public RbReadyType rbReadyType() {
        return new RbReadyType(this, Keys.CONDUCTOR_SCHEDULE__FK_CONDUCTOR_SCHEDULE_TBL_READY_TYPE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConductorSchedule as(String alias) {
        return new ConductorSchedule(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConductorSchedule as(Name alias) {
        return new ConductorSchedule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConductorSchedule rename(String name) {
        return new ConductorSchedule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConductorSchedule rename(Name name) {
        return new ConductorSchedule(name, null);
    }
}
