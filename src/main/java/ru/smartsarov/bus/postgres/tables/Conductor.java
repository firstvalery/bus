/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.bus.postgres.Indexes;
import ru.smartsarov.bus.postgres.Keys;
import ru.smartsarov.bus.postgres.Public;
import ru.smartsarov.bus.postgres.tables.records.ConductorRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Conductor extends TableImpl<ConductorRecord> {

    private static final long serialVersionUID = -1148264497;

    /**
     * The reference instance of <code>public.conductor</code>
     */
    public static final Conductor CONDUCTOR = new Conductor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConductorRecord> getRecordType() {
        return ConductorRecord.class;
    }

    /**
     * The column <code>public.conductor.id</code>.
     */
    public final TableField<ConductorRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('conductor_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.conductor.employee_data_id</code>.
     */
    public final TableField<ConductorRecord, Short> EMPLOYEE_DATA_ID = createField("employee_data_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.conductor.position_id</code>.
     */
    public final TableField<ConductorRecord, Short> POSITION_ID = createField("position_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.conductor.schedule_type</code>.
     */
    public final TableField<ConductorRecord, Short> SCHEDULE_TYPE = createField("schedule_type", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.conductor.state_id</code>.
     */
    public final TableField<ConductorRecord, Short> STATE_ID = createField("state_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.conductor.removed</code>.
     */
    public final TableField<ConductorRecord, Short> REMOVED = createField("removed", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * Create a <code>public.conductor</code> table reference
     */
    public Conductor() {
        this(DSL.name("conductor"), null);
    }

    /**
     * Create an aliased <code>public.conductor</code> table reference
     */
    public Conductor(String alias) {
        this(DSL.name(alias), CONDUCTOR);
    }

    /**
     * Create an aliased <code>public.conductor</code> table reference
     */
    public Conductor(Name alias) {
        this(alias, CONDUCTOR);
    }

    private Conductor(Name alias, Table<ConductorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Conductor(Name alias, Table<ConductorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Conductor(Table<O> child, ForeignKey<O, ConductorRecord> key) {
        super(child, key, CONDUCTOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_CONDUCTOR_TBL_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ConductorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CONDUCTOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConductorRecord> getPrimaryKey() {
        return Keys.PK_CONDUCTOR_TBL_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConductorRecord>> getKeys() {
        return Arrays.<UniqueKey<ConductorRecord>>asList(Keys.PK_CONDUCTOR_TBL_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ConductorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ConductorRecord, ?>>asList(Keys.CONDUCTOR__FK_CONDUCTOR_TBL_SCHEDULE_TYPE_ID_FK, Keys.CONDUCTOR__FK_CONDUCTOR_TBL_EMPLOYEE_DATA_ID, Keys.CONDUCTOR__FK_CONDUCTOR_TBL_POSITION_ID, Keys.CONDUCTOR__FK_CONDUCTOR_TBL_STATE_ID_FK);
    }

    public RbEmployeeScheduleType rbEmployeeScheduleType() {
        return new RbEmployeeScheduleType(this, Keys.CONDUCTOR__FK_CONDUCTOR_TBL_SCHEDULE_TYPE_ID_FK);
    }

    public EmployeeInfo employeeInfo() {
        return new EmployeeInfo(this, Keys.CONDUCTOR__FK_CONDUCTOR_TBL_EMPLOYEE_DATA_ID);
    }

    public Position position() {
        return new Position(this, Keys.CONDUCTOR__FK_CONDUCTOR_TBL_POSITION_ID);
    }

    public RbStateType rbStateType() {
        return new RbStateType(this, Keys.CONDUCTOR__FK_CONDUCTOR_TBL_STATE_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Conductor as(String alias) {
        return new Conductor(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Conductor as(Name alias) {
        return new Conductor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Conductor rename(String name) {
        return new Conductor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conductor rename(Name name) {
        return new Conductor(name, null);
    }
}
