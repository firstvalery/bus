/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables;


import java.sql.Date;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.bus.postgres.Indexes;
import ru.smartsarov.bus.postgres.Keys;
import ru.smartsarov.bus.postgres.Public;
import ru.smartsarov.bus.postgres.tables.records.ShiftFixedSnapshotRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShiftFixedSnapshot extends TableImpl<ShiftFixedSnapshotRecord> {

    private static final long serialVersionUID = 726784982;

    /**
     * The reference instance of <code>public.shift_fixed_snapshot</code>
     */
    public static final ShiftFixedSnapshot SHIFT_FIXED_SNAPSHOT = new ShiftFixedSnapshot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShiftFixedSnapshotRecord> getRecordType() {
        return ShiftFixedSnapshotRecord.class;
    }

    /**
     * The column <code>public.shift_fixed_snapshot.shift_schedule_id</code>.
     */
    public final TableField<ShiftFixedSnapshotRecord, Integer> SHIFT_SCHEDULE_ID = createField("shift_schedule_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('shift_fixed_snapshot_shift_schedule_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.shift_fixed_snapshot.date</code>.
     */
    public final TableField<ShiftFixedSnapshotRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.shift_fixed_snapshot.driver_id</code>.
     */
    public final TableField<ShiftFixedSnapshotRecord, Integer> DRIVER_ID = createField("driver_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.shift_fixed_snapshot.conductor_id</code>.
     */
    public final TableField<ShiftFixedSnapshotRecord, Integer> CONDUCTOR_ID = createField("conductor_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.shift_fixed_snapshot.created_at</code>.
     */
    public final TableField<ShiftFixedSnapshotRecord, OffsetDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.shift_fixed_snapshot.ended_at</code>.
     */
    public final TableField<ShiftFixedSnapshotRecord, OffsetDateTime> ENDED_AT = createField("ended_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.shift_fixed_snapshot.removed</code>.
     */
    public final TableField<ShiftFixedSnapshotRecord, Short> REMOVED = createField("removed", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>public.shift_fixed_snapshot</code> table reference
     */
    public ShiftFixedSnapshot() {
        this(DSL.name("shift_fixed_snapshot"), null);
    }

    /**
     * Create an aliased <code>public.shift_fixed_snapshot</code> table reference
     */
    public ShiftFixedSnapshot(String alias) {
        this(DSL.name(alias), SHIFT_FIXED_SNAPSHOT);
    }

    /**
     * Create an aliased <code>public.shift_fixed_snapshot</code> table reference
     */
    public ShiftFixedSnapshot(Name alias) {
        this(alias, SHIFT_FIXED_SNAPSHOT);
    }

    private ShiftFixedSnapshot(Name alias, Table<ShiftFixedSnapshotRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShiftFixedSnapshot(Name alias, Table<ShiftFixedSnapshotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ShiftFixedSnapshot(Table<O> child, ForeignKey<O, ShiftFixedSnapshotRecord> key) {
        super(child, key, SHIFT_FIXED_SNAPSHOT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_FIXED_SHIFT_SNAPSHOT_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ShiftFixedSnapshotRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SHIFT_FIXED_SNAPSHOT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ShiftFixedSnapshotRecord> getPrimaryKey() {
        return Keys.PK_FIXED_SHIFT_SNAPSHOT_TBL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ShiftFixedSnapshotRecord>> getKeys() {
        return Arrays.<UniqueKey<ShiftFixedSnapshotRecord>>asList(Keys.PK_FIXED_SHIFT_SNAPSHOT_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ShiftFixedSnapshotRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ShiftFixedSnapshotRecord, ?>>asList(Keys.SHIFT_FIXED_SNAPSHOT__FK_FIXED_SHIFT_SNAPSHOT_TBL_SHIFT_SCHEDULE_ID, Keys.SHIFT_FIXED_SNAPSHOT__FK_FIXED_SHIFT_SNAPSHOT_TBL_DRIVER_ID, Keys.SHIFT_FIXED_SNAPSHOT__FK_FIXED_SHIFT_SNAPSHOT_TBL_CONDUCTOR);
    }

    public ShiftSchedule shiftSchedule() {
        return new ShiftSchedule(this, Keys.SHIFT_FIXED_SNAPSHOT__FK_FIXED_SHIFT_SNAPSHOT_TBL_SHIFT_SCHEDULE_ID);
    }

    public Driver driver() {
        return new Driver(this, Keys.SHIFT_FIXED_SNAPSHOT__FK_FIXED_SHIFT_SNAPSHOT_TBL_DRIVER_ID);
    }

    public Conductor conductor() {
        return new Conductor(this, Keys.SHIFT_FIXED_SNAPSHOT__FK_FIXED_SHIFT_SNAPSHOT_TBL_CONDUCTOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShiftFixedSnapshot as(String alias) {
        return new ShiftFixedSnapshot(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShiftFixedSnapshot as(Name alias) {
        return new ShiftFixedSnapshot(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShiftFixedSnapshot rename(String name) {
        return new ShiftFixedSnapshot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShiftFixedSnapshot rename(Name name) {
        return new ShiftFixedSnapshot(name, null);
    }
}
