/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.bus.postgres.Indexes;
import ru.smartsarov.bus.postgres.Keys;
import ru.smartsarov.bus.postgres.Public;
import ru.smartsarov.bus.postgres.tables.records.TrackCoordinatesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrackCoordinates extends TableImpl<TrackCoordinatesRecord> {

    private static final long serialVersionUID = -95132280;

    /**
     * The reference instance of <code>public.track_coordinates</code>
     */
    public static final TrackCoordinates TRACK_COORDINATES = new TrackCoordinates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrackCoordinatesRecord> getRecordType() {
        return TrackCoordinatesRecord.class;
    }

    /**
     * The column <code>public.track_coordinates.id</code>.
     */
    public final TableField<TrackCoordinatesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('track_coordinates_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.track_coordinates.track_id</code>.
     */
    public final TableField<TrackCoordinatesRecord, Short> TRACK_ID = createField("track_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.track_coordinates.order</code>.
     */
    public final TableField<TrackCoordinatesRecord, Short> ORDER = createField("order", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.track_coordinates.lon</code>.
     */
    public final TableField<TrackCoordinatesRecord, BigDecimal> LON = createField("lon", org.jooq.impl.SQLDataType.NUMERIC(13, 10).nullable(false), this, "");

    /**
     * The column <code>public.track_coordinates.lat</code>.
     */
    public final TableField<TrackCoordinatesRecord, BigDecimal> LAT = createField("lat", org.jooq.impl.SQLDataType.NUMERIC(13, 10).nullable(false), this, "");

    /**
     * The column <code>public.track_coordinates.removed</code>.
     */
    public final TableField<TrackCoordinatesRecord, Short> REMOVED = createField("removed", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * Create a <code>public.track_coordinates</code> table reference
     */
    public TrackCoordinates() {
        this(DSL.name("track_coordinates"), null);
    }

    /**
     * Create an aliased <code>public.track_coordinates</code> table reference
     */
    public TrackCoordinates(String alias) {
        this(DSL.name(alias), TRACK_COORDINATES);
    }

    /**
     * Create an aliased <code>public.track_coordinates</code> table reference
     */
    public TrackCoordinates(Name alias) {
        this(alias, TRACK_COORDINATES);
    }

    private TrackCoordinates(Name alias, Table<TrackCoordinatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrackCoordinates(Name alias, Table<TrackCoordinatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TrackCoordinates(Table<O> child, ForeignKey<O, TrackCoordinatesRecord> key) {
        super(child, key, TRACK_COORDINATES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_TRACK_COORDINATES_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TrackCoordinatesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRACK_COORDINATES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TrackCoordinatesRecord> getPrimaryKey() {
        return Keys.PK_TRACK_COORDINATES_TBL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TrackCoordinatesRecord>> getKeys() {
        return Arrays.<UniqueKey<TrackCoordinatesRecord>>asList(Keys.PK_TRACK_COORDINATES_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TrackCoordinatesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TrackCoordinatesRecord, ?>>asList(Keys.TRACK_COORDINATES__FK_TRACK_COORDINATES_TBL_TRACK_ID);
    }

    public Track track() {
        return new Track(this, Keys.TRACK_COORDINATES__FK_TRACK_COORDINATES_TBL_TRACK_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TrackCoordinates as(String alias) {
        return new TrackCoordinates(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TrackCoordinates as(Name alias) {
        return new TrackCoordinates(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrackCoordinates rename(String name) {
        return new TrackCoordinates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrackCoordinates rename(Name name) {
        return new TrackCoordinates(name, null);
    }
}
