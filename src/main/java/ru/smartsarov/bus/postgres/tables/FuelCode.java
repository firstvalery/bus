/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.bus.postgres.Indexes;
import ru.smartsarov.bus.postgres.Keys;
import ru.smartsarov.bus.postgres.Public;
import ru.smartsarov.bus.postgres.tables.records.FuelCodeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FuelCode extends TableImpl<FuelCodeRecord> {

    private static final long serialVersionUID = 314425343;

    /**
     * The reference instance of <code>public.fuel_code</code>
     */
    public static final FuelCode FUEL_CODE = new FuelCode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FuelCodeRecord> getRecordType() {
        return FuelCodeRecord.class;
    }

    /**
     * The column <code>public.fuel_code.id</code>.
     */
    public final TableField<FuelCodeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('fuel_code_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.fuel_code.fuel_type_id</code>.
     */
    public final TableField<FuelCodeRecord, Integer> FUEL_TYPE_ID = createField("fuel_type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('fuel_code_fuel_type_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.fuel_code.winter_consumption</code>.
     */
    public final TableField<FuelCodeRecord, Float> WINTER_CONSUMPTION = createField("winter_consumption", org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.fuel_code.summer_consumption</code>.
     */
    public final TableField<FuelCodeRecord, Float> SUMMER_CONSUMPTION = createField("summer_consumption", org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.fuel_code.heating_addition</code>.
     */
    public final TableField<FuelCodeRecord, Float> HEATING_ADDITION = createField("heating_addition", org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.fuel_code.removed</code>.
     */
    public final TableField<FuelCodeRecord, Short> REMOVED = createField("removed", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * Create a <code>public.fuel_code</code> table reference
     */
    public FuelCode() {
        this(DSL.name("fuel_code"), null);
    }

    /**
     * Create an aliased <code>public.fuel_code</code> table reference
     */
    public FuelCode(String alias) {
        this(DSL.name(alias), FUEL_CODE);
    }

    /**
     * Create an aliased <code>public.fuel_code</code> table reference
     */
    public FuelCode(Name alias) {
        this(alias, FUEL_CODE);
    }

    private FuelCode(Name alias, Table<FuelCodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private FuelCode(Name alias, Table<FuelCodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FuelCode(Table<O> child, ForeignKey<O, FuelCodeRecord> key) {
        super(child, key, FUEL_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_FUEL_CODE_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FuelCodeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FUEL_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FuelCodeRecord> getPrimaryKey() {
        return Keys.PK_FUEL_CODE_TBL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FuelCodeRecord>> getKeys() {
        return Arrays.<UniqueKey<FuelCodeRecord>>asList(Keys.PK_FUEL_CODE_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FuelCodeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FuelCodeRecord, ?>>asList(Keys.FUEL_CODE__FK_BUS_DATA_TBL_FUEL_TYPE);
    }

    public RbFuelType rbFuelType() {
        return new RbFuelType(this, Keys.FUEL_CODE__FK_BUS_DATA_TBL_FUEL_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FuelCode as(String alias) {
        return new FuelCode(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FuelCode as(Name alias) {
        return new FuelCode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FuelCode rename(String name) {
        return new FuelCode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FuelCode rename(Name name) {
        return new FuelCode(name, null);
    }
}
