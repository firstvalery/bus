/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.bus.postgres.Indexes;
import ru.smartsarov.bus.postgres.Keys;
import ru.smartsarov.bus.postgres.Public;
import ru.smartsarov.bus.postgres.tables.records.DriverSnapshotRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DriverSnapshot extends TableImpl<DriverSnapshotRecord> {

    private static final long serialVersionUID = 66115859;

    /**
     * The reference instance of <code>public.driver_snapshot</code>
     */
    public static final DriverSnapshot DRIVER_SNAPSHOT = new DriverSnapshot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DriverSnapshotRecord> getRecordType() {
        return DriverSnapshotRecord.class;
    }

    /**
     * The column <code>public.driver_snapshot.id</code>.
     */
    public final TableField<DriverSnapshotRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('driver_snapshot_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.driver_snapshot.employee_data_id</code>.
     */
    public final TableField<DriverSnapshotRecord, Short> EMPLOYEE_DATA_ID = createField("employee_data_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.driver_snapshot.position_id</code>.
     */
    public final TableField<DriverSnapshotRecord, Short> POSITION_ID = createField("position_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.driver_snapshot.bus_id</code>.
     */
    public final TableField<DriverSnapshotRecord, Short> BUS_ID = createField("bus_id", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.driver_snapshot.brigadier_flag</code>.
     */
    public final TableField<DriverSnapshotRecord, Boolean> BRIGADIER_FLAG = createField("brigadier_flag", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.driver_snapshot.group_id</code>.
     */
    public final TableField<DriverSnapshotRecord, Short> GROUP_ID = createField("group_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.driver_snapshot.schedule_type</code>.
     */
    public final TableField<DriverSnapshotRecord, Short> SCHEDULE_TYPE = createField("schedule_type", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.driver_snapshot.state_id</code>.
     */
    public final TableField<DriverSnapshotRecord, Short> STATE_ID = createField("state_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.driver_snapshot.ticket_flag</code>.
     */
    public final TableField<DriverSnapshotRecord, Boolean> TICKET_FLAG = createField("ticket_flag", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.driver_snapshot.created_at</code>.
     */
    public final TableField<DriverSnapshotRecord, OffsetDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.driver_snapshot.ended_at</code>.
     */
    public final TableField<DriverSnapshotRecord, OffsetDateTime> ENDED_AT = createField("ended_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.driver_snapshot.removed</code>.
     */
    public final TableField<DriverSnapshotRecord, Short> REMOVED = createField("removed", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>public.driver_snapshot</code> table reference
     */
    public DriverSnapshot() {
        this(DSL.name("driver_snapshot"), null);
    }

    /**
     * Create an aliased <code>public.driver_snapshot</code> table reference
     */
    public DriverSnapshot(String alias) {
        this(DSL.name(alias), DRIVER_SNAPSHOT);
    }

    /**
     * Create an aliased <code>public.driver_snapshot</code> table reference
     */
    public DriverSnapshot(Name alias) {
        this(alias, DRIVER_SNAPSHOT);
    }

    private DriverSnapshot(Name alias, Table<DriverSnapshotRecord> aliased) {
        this(alias, aliased, null);
    }

    private DriverSnapshot(Name alias, Table<DriverSnapshotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DriverSnapshot(Table<O> child, ForeignKey<O, DriverSnapshotRecord> key) {
        super(child, key, DRIVER_SNAPSHOT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_EMPLOYEE_SNAPSHOT_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DriverSnapshotRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DRIVER_SNAPSHOT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DriverSnapshotRecord> getPrimaryKey() {
        return Keys.PK_EMPLOYEE_SNAPSHOT_TBL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DriverSnapshotRecord>> getKeys() {
        return Arrays.<UniqueKey<DriverSnapshotRecord>>asList(Keys.PK_EMPLOYEE_SNAPSHOT_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DriverSnapshotRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DriverSnapshotRecord, ?>>asList(Keys.DRIVER_SNAPSHOT__FK_DRIVER_SNAPSHOT_TBL_EMPLOYEE_DATA_ID, Keys.DRIVER_SNAPSHOT__FK_DRIVER_SNAPSHOT_TBL_POSITION_ID, Keys.DRIVER_SNAPSHOT__FK_DRIVER_SNAPSHOT_TBL_BUS_ID, Keys.DRIVER_SNAPSHOT__FK_DRIVER_SNAPSHOT_TBL_GROUP_ID, Keys.DRIVER_SNAPSHOT__FK_DRIVER_SNAPSHOT_TBL_SCHEDULE_TYPE, Keys.DRIVER_SNAPSHOT__FK_DRIVER_SNAPSHOT_TBL_STATE_ID);
    }

    public EmployeeInfo employeeInfo() {
        return new EmployeeInfo(this, Keys.DRIVER_SNAPSHOT__FK_DRIVER_SNAPSHOT_TBL_EMPLOYEE_DATA_ID);
    }

    public RbPosition rbPosition() {
        return new RbPosition(this, Keys.DRIVER_SNAPSHOT__FK_DRIVER_SNAPSHOT_TBL_POSITION_ID);
    }

    public Bus bus() {
        return new Bus(this, Keys.DRIVER_SNAPSHOT__FK_DRIVER_SNAPSHOT_TBL_BUS_ID);
    }

    public DriverGroup driverGroup() {
        return new DriverGroup(this, Keys.DRIVER_SNAPSHOT__FK_DRIVER_SNAPSHOT_TBL_GROUP_ID);
    }

    public RbEmployeeScheduleType rbEmployeeScheduleType() {
        return new RbEmployeeScheduleType(this, Keys.DRIVER_SNAPSHOT__FK_DRIVER_SNAPSHOT_TBL_SCHEDULE_TYPE);
    }

    public RbStateType rbStateType() {
        return new RbStateType(this, Keys.DRIVER_SNAPSHOT__FK_DRIVER_SNAPSHOT_TBL_STATE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DriverSnapshot as(String alias) {
        return new DriverSnapshot(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DriverSnapshot as(Name alias) {
        return new DriverSnapshot(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DriverSnapshot rename(String name) {
        return new DriverSnapshot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DriverSnapshot rename(Name name) {
        return new DriverSnapshot(name, null);
    }
}
