/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.bus.postgres.Indexes;
import ru.smartsarov.bus.postgres.Keys;
import ru.smartsarov.bus.postgres.Public;
import ru.smartsarov.bus.postgres.tables.records.EmployeeDataRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeData extends TableImpl<EmployeeDataRecord> {

    private static final long serialVersionUID = -1956589927;

    /**
     * The reference instance of <code>public.employee_data</code>
     */
    public static final EmployeeData EMPLOYEE_DATA = new EmployeeData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeDataRecord> getRecordType() {
        return EmployeeDataRecord.class;
    }

    /**
     * The column <code>public.employee_data.id</code>.
     */
    public final TableField<EmployeeDataRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('employee_data_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.employee_data.personnel_number</code>.
     */
    public final TableField<EmployeeDataRecord, String> PERSONNEL_NUMBER = createField("personnel_number", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.employee_data.first_name</code>.
     */
    public final TableField<EmployeeDataRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.employee_data.middle_name</code>.
     */
    public final TableField<EmployeeDataRecord, String> MIDDLE_NAME = createField("middle_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.employee_data.last_name</code>.
     */
    public final TableField<EmployeeDataRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.employee_data.employee_type_id</code>.
     */
    public final TableField<EmployeeDataRecord, Short> EMPLOYEE_TYPE_ID = createField("employee_type_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.employee_data.removed</code>.
     */
    public final TableField<EmployeeDataRecord, Short> REMOVED = createField("removed", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>public.employee_data</code> table reference
     */
    public EmployeeData() {
        this(DSL.name("employee_data"), null);
    }

    /**
     * Create an aliased <code>public.employee_data</code> table reference
     */
    public EmployeeData(String alias) {
        this(DSL.name(alias), EMPLOYEE_DATA);
    }

    /**
     * Create an aliased <code>public.employee_data</code> table reference
     */
    public EmployeeData(Name alias) {
        this(alias, EMPLOYEE_DATA);
    }

    private EmployeeData(Name alias, Table<EmployeeDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeData(Name alias, Table<EmployeeDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EmployeeData(Table<O> child, ForeignKey<O, EmployeeDataRecord> key) {
        super(child, key, EMPLOYEE_DATA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_EMPLOYEE_DATA_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EmployeeDataRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EMPLOYEE_DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmployeeDataRecord> getPrimaryKey() {
        return Keys.PK_EMPLOYEE_DATA_TBL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmployeeDataRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeeDataRecord>>asList(Keys.PK_EMPLOYEE_DATA_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EmployeeDataRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeeDataRecord, ?>>asList(Keys.EMPLOYEE_DATA__FK_EMPLOYEE_DATA_EMPLOYEE_TYPE_ID);
    }

    public RbEmployeeType rbEmployeeType() {
        return new RbEmployeeType(this, Keys.EMPLOYEE_DATA__FK_EMPLOYEE_DATA_EMPLOYEE_TYPE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeData as(String alias) {
        return new EmployeeData(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeData as(Name alias) {
        return new EmployeeData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeData rename(String name) {
        return new EmployeeData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeData rename(Name name) {
        return new EmployeeData(name, null);
    }
}
