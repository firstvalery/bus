/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.bus.postgres.Indexes;
import ru.smartsarov.bus.postgres.Keys;
import ru.smartsarov.bus.postgres.Public;
import ru.smartsarov.bus.postgres.tables.records.IncidentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Incident extends TableImpl<IncidentRecord> {

    private static final long serialVersionUID = 1059853794;

    /**
     * The reference instance of <code>public.incident</code>
     */
    public static final Incident INCIDENT = new Incident();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IncidentRecord> getRecordType() {
        return IncidentRecord.class;
    }

    /**
     * The column <code>public.incident.id</code>.
     */
    public final TableField<IncidentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('incident_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.incident.description</code>.
     */
    public final TableField<IncidentRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.incident.type</code>.
     */
    public final TableField<IncidentRecord, Short> TYPE = createField("type", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.incident.removed</code>.
     */
    public final TableField<IncidentRecord, Short> REMOVED = createField("removed", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>public.incident</code> table reference
     */
    public Incident() {
        this(DSL.name("incident"), null);
    }

    /**
     * Create an aliased <code>public.incident</code> table reference
     */
    public Incident(String alias) {
        this(DSL.name(alias), INCIDENT);
    }

    /**
     * Create an aliased <code>public.incident</code> table reference
     */
    public Incident(Name alias) {
        this(alias, INCIDENT);
    }

    private Incident(Name alias, Table<IncidentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Incident(Name alias, Table<IncidentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Incident(Table<O> child, ForeignKey<O, IncidentRecord> key) {
        super(child, key, INCIDENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_INCIDENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IncidentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INCIDENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IncidentRecord> getPrimaryKey() {
        return Keys.PK_INCIDENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IncidentRecord>> getKeys() {
        return Arrays.<UniqueKey<IncidentRecord>>asList(Keys.PK_INCIDENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<IncidentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IncidentRecord, ?>>asList(Keys.INCIDENT__FK_INCIDENT_TBL_TYPE);
    }

    public RbIncidentType rbIncidentType() {
        return new RbIncidentType(this, Keys.INCIDENT__FK_INCIDENT_TBL_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Incident as(String alias) {
        return new Incident(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Incident as(Name alias) {
        return new Incident(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Incident rename(String name) {
        return new Incident(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Incident rename(Name name) {
        return new Incident(name, null);
    }
}
