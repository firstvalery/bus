/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables;


import java.sql.Date;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.bus.postgres.Indexes;
import ru.smartsarov.bus.postgres.Keys;
import ru.smartsarov.bus.postgres.Public;
import ru.smartsarov.bus.postgres.tables.records.ConductorScheduleSnapshotRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConductorScheduleSnapshot extends TableImpl<ConductorScheduleSnapshotRecord> {

    private static final long serialVersionUID = -1520877898;

    /**
     * The reference instance of <code>public.conductor_schedule_snapshot</code>
     */
    public static final ConductorScheduleSnapshot CONDUCTOR_SCHEDULE_SNAPSHOT = new ConductorScheduleSnapshot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConductorScheduleSnapshotRecord> getRecordType() {
        return ConductorScheduleSnapshotRecord.class;
    }

    /**
     * The column <code>public.conductor_schedule_snapshot.conductor_id</code>.
     */
    public final TableField<ConductorScheduleSnapshotRecord, Short> CONDUCTOR_ID = createField("conductor_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.conductor_schedule_snapshot.date</code>.
     */
    public final TableField<ConductorScheduleSnapshotRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.conductor_schedule_snapshot.shift_type_id</code>.
     */
    public final TableField<ConductorScheduleSnapshotRecord, Short> SHIFT_TYPE_ID = createField("shift_type_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.conductor_schedule_snapshot.ready_type_id</code>.
     */
    public final TableField<ConductorScheduleSnapshotRecord, Short> READY_TYPE_ID = createField("ready_type_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.conductor_schedule_snapshot.created_at</code>.
     */
    public final TableField<ConductorScheduleSnapshotRecord, OffsetDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.conductor_schedule_snapshot.ended_at</code>.
     */
    public final TableField<ConductorScheduleSnapshotRecord, OffsetDateTime> ENDED_AT = createField("ended_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.conductor_schedule_snapshot.removed</code>.
     */
    public final TableField<ConductorScheduleSnapshotRecord, Short> REMOVED = createField("removed", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * Create a <code>public.conductor_schedule_snapshot</code> table reference
     */
    public ConductorScheduleSnapshot() {
        this(DSL.name("conductor_schedule_snapshot"), null);
    }

    /**
     * Create an aliased <code>public.conductor_schedule_snapshot</code> table reference
     */
    public ConductorScheduleSnapshot(String alias) {
        this(DSL.name(alias), CONDUCTOR_SCHEDULE_SNAPSHOT);
    }

    /**
     * Create an aliased <code>public.conductor_schedule_snapshot</code> table reference
     */
    public ConductorScheduleSnapshot(Name alias) {
        this(alias, CONDUCTOR_SCHEDULE_SNAPSHOT);
    }

    private ConductorScheduleSnapshot(Name alias, Table<ConductorScheduleSnapshotRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConductorScheduleSnapshot(Name alias, Table<ConductorScheduleSnapshotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ConductorScheduleSnapshot(Table<O> child, ForeignKey<O, ConductorScheduleSnapshotRecord> key) {
        super(child, key, CONDUCTOR_SCHEDULE_SNAPSHOT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_CONDUCTOR_SCHEDULE_SNAPSHOT_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConductorScheduleSnapshotRecord> getPrimaryKey() {
        return Keys.PK_CONDUCTOR_SCHEDULE_SNAPSHOT_TBL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConductorScheduleSnapshotRecord>> getKeys() {
        return Arrays.<UniqueKey<ConductorScheduleSnapshotRecord>>asList(Keys.PK_CONDUCTOR_SCHEDULE_SNAPSHOT_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ConductorScheduleSnapshotRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ConductorScheduleSnapshotRecord, ?>>asList(Keys.CONDUCTOR_SCHEDULE_SNAPSHOT__FK_CONDUCTOR_SCHEDULE_SNAPSHOT_TBL_CONDUCTOR_ID, Keys.CONDUCTOR_SCHEDULE_SNAPSHOT__FK_CONDUCTOR_SCHEDULE_SNAPSHOT_TBL_SHIFT_TYPE_ID, Keys.CONDUCTOR_SCHEDULE_SNAPSHOT__FK_CONDUCTOR_SCHEDULE_SNAPSHOT_TBL_READY_TYPE_ID);
    }

    public Conductor conductor() {
        return new Conductor(this, Keys.CONDUCTOR_SCHEDULE_SNAPSHOT__FK_CONDUCTOR_SCHEDULE_SNAPSHOT_TBL_CONDUCTOR_ID);
    }

    public ShiftType shiftType() {
        return new ShiftType(this, Keys.CONDUCTOR_SCHEDULE_SNAPSHOT__FK_CONDUCTOR_SCHEDULE_SNAPSHOT_TBL_SHIFT_TYPE_ID);
    }

    public RbReadyType rbReadyType() {
        return new RbReadyType(this, Keys.CONDUCTOR_SCHEDULE_SNAPSHOT__FK_CONDUCTOR_SCHEDULE_SNAPSHOT_TBL_READY_TYPE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConductorScheduleSnapshot as(String alias) {
        return new ConductorScheduleSnapshot(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConductorScheduleSnapshot as(Name alias) {
        return new ConductorScheduleSnapshot(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConductorScheduleSnapshot rename(String name) {
        return new ConductorScheduleSnapshot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConductorScheduleSnapshot rename(Name name) {
        return new ConductorScheduleSnapshot(name, null);
    }
}
