/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.bus.postgres.Indexes;
import ru.smartsarov.bus.postgres.Keys;
import ru.smartsarov.bus.postgres.Public;
import ru.smartsarov.bus.postgres.tables.records.RaceSnaphotRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RaceSnaphot extends TableImpl<RaceSnaphotRecord> {

    private static final long serialVersionUID = -705938809;

    /**
     * The reference instance of <code>public.race_snaphot</code>
     */
    public static final RaceSnaphot RACE_SNAPHOT = new RaceSnaphot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RaceSnaphotRecord> getRecordType() {
        return RaceSnaphotRecord.class;
    }

    /**
     * The column <code>public.race_snaphot.id</code>.
     */
    public final TableField<RaceSnaphotRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('race_snaphot_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.race_snaphot.driver_id</code>.
     */
    public final TableField<RaceSnaphotRecord, Short> DRIVER_ID = createField("driver_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.race_snaphot.conductor_id</code>.
     */
    public final TableField<RaceSnaphotRecord, Short> CONDUCTOR_ID = createField("conductor_id", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.race_snaphot.bus_id</code>.
     */
    public final TableField<RaceSnaphotRecord, Short> BUS_ID = createField("bus_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.race_snaphot.ts_start</code>.
     */
    public final TableField<RaceSnaphotRecord, OffsetDateTime> TS_START = createField("ts_start", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.race_snaphot.done</code>.
     */
    public final TableField<RaceSnaphotRecord, Boolean> DONE = createField("done", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.race_snaphot.intsidend_id</code>.
     */
    public final TableField<RaceSnaphotRecord, Short> INTSIDEND_ID = createField("intsidend_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.race_snaphot.created_at</code>.
     */
    public final TableField<RaceSnaphotRecord, OffsetDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.race_snaphot.ended_at</code>.
     */
    public final TableField<RaceSnaphotRecord, OffsetDateTime> ENDED_AT = createField("ended_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.race_snaphot.removed</code>.
     */
    public final TableField<RaceSnaphotRecord, Short> REMOVED = createField("removed", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>public.race_snaphot</code> table reference
     */
    public RaceSnaphot() {
        this(DSL.name("race_snaphot"), null);
    }

    /**
     * Create an aliased <code>public.race_snaphot</code> table reference
     */
    public RaceSnaphot(String alias) {
        this(DSL.name(alias), RACE_SNAPHOT);
    }

    /**
     * Create an aliased <code>public.race_snaphot</code> table reference
     */
    public RaceSnaphot(Name alias) {
        this(alias, RACE_SNAPHOT);
    }

    private RaceSnaphot(Name alias, Table<RaceSnaphotRecord> aliased) {
        this(alias, aliased, null);
    }

    private RaceSnaphot(Name alias, Table<RaceSnaphotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RaceSnaphot(Table<O> child, ForeignKey<O, RaceSnaphotRecord> key) {
        super(child, key, RACE_SNAPHOT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_RACE_SNAPHOT_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RaceSnaphotRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RACE_SNAPHOT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RaceSnaphotRecord> getPrimaryKey() {
        return Keys.PK_RACE_SNAPHOT_TBL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RaceSnaphotRecord>> getKeys() {
        return Arrays.<UniqueKey<RaceSnaphotRecord>>asList(Keys.PK_RACE_SNAPHOT_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RaceSnaphotRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RaceSnaphotRecord, ?>>asList(Keys.RACE_SNAPHOT__FK_RACE_SNAPHOT_TBL_DRIVER_ID, Keys.RACE_SNAPHOT__FK_RACE_SNAPHOT_TBL_CONDUCTOR_ID, Keys.RACE_SNAPHOT__FK_RACE_SNAPHOT_TBL_BUS_ID, Keys.RACE_SNAPHOT__FK_RACE_SNAPHOT_TBL_INTSIDENT_ID_FK);
    }

    public Driver driver() {
        return new Driver(this, Keys.RACE_SNAPHOT__FK_RACE_SNAPHOT_TBL_DRIVER_ID);
    }

    public Conductor conductor() {
        return new Conductor(this, Keys.RACE_SNAPHOT__FK_RACE_SNAPHOT_TBL_CONDUCTOR_ID);
    }

    public Bus bus() {
        return new Bus(this, Keys.RACE_SNAPHOT__FK_RACE_SNAPHOT_TBL_BUS_ID);
    }

    public Intsident intsident() {
        return new Intsident(this, Keys.RACE_SNAPHOT__FK_RACE_SNAPHOT_TBL_INTSIDENT_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RaceSnaphot as(String alias) {
        return new RaceSnaphot(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RaceSnaphot as(Name alias) {
        return new RaceSnaphot(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RaceSnaphot rename(String name) {
        return new RaceSnaphot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaceSnaphot rename(Name name) {
        return new RaceSnaphot(name, null);
    }
}
