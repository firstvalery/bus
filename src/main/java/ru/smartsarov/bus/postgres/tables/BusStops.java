/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.bus.postgres.Indexes;
import ru.smartsarov.bus.postgres.Keys;
import ru.smartsarov.bus.postgres.Public;
import ru.smartsarov.bus.postgres.tables.records.BusStopsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BusStops extends TableImpl<BusStopsRecord> {

    private static final long serialVersionUID = -477441020;

    /**
     * The reference instance of <code>public.bus_stops</code>
     */
    public static final BusStops BUS_STOPS = new BusStops();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BusStopsRecord> getRecordType() {
        return BusStopsRecord.class;
    }

    /**
     * The column <code>public.bus_stops.id</code>.
     */
    public final TableField<BusStopsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('bus_stops_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.bus_stops.bus_stop_list_id</code>.
     */
    public final TableField<BusStopsRecord, Short> BUS_STOP_LIST_ID = createField("bus_stop_list_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.bus_stops.order</code>.
     */
    public final TableField<BusStopsRecord, Short> ORDER = createField("order", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.bus_stops.bus_stop_id</code>.
     */
    public final TableField<BusStopsRecord, Short> BUS_STOP_ID = createField("bus_stop_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.bus_stops.elapsed_time</code>.
     */
    public final TableField<BusStopsRecord, Short> ELAPSED_TIME = createField("elapsed_time", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.bus_stops.removed</code>.
     */
    public final TableField<BusStopsRecord, Short> REMOVED = createField("removed", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * Create a <code>public.bus_stops</code> table reference
     */
    public BusStops() {
        this(DSL.name("bus_stops"), null);
    }

    /**
     * Create an aliased <code>public.bus_stops</code> table reference
     */
    public BusStops(String alias) {
        this(DSL.name(alias), BUS_STOPS);
    }

    /**
     * Create an aliased <code>public.bus_stops</code> table reference
     */
    public BusStops(Name alias) {
        this(alias, BUS_STOPS);
    }

    private BusStops(Name alias, Table<BusStopsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BusStops(Name alias, Table<BusStopsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BusStops(Table<O> child, ForeignKey<O, BusStopsRecord> key) {
        super(child, key, BUS_STOPS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_BUS_STOPS_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BusStopsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BUS_STOPS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BusStopsRecord> getPrimaryKey() {
        return Keys.PK_BUS_STOPS_TBL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BusStopsRecord>> getKeys() {
        return Arrays.<UniqueKey<BusStopsRecord>>asList(Keys.PK_BUS_STOPS_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BusStopsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BusStopsRecord, ?>>asList(Keys.BUS_STOPS__FK_BUS_STOPS_TBL_BUS_STOP_LIST_ID, Keys.BUS_STOPS__FK_BUS_STOPS_TBL_BUS_STOP_ID);
    }

    public BusStopList busStopList() {
        return new BusStopList(this, Keys.BUS_STOPS__FK_BUS_STOPS_TBL_BUS_STOP_LIST_ID);
    }

    public RbBusStop rbBusStop() {
        return new RbBusStop(this, Keys.BUS_STOPS__FK_BUS_STOPS_TBL_BUS_STOP_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BusStops as(String alias) {
        return new BusStops(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BusStops as(Name alias) {
        return new BusStops(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BusStops rename(String name) {
        return new BusStops(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BusStops rename(Name name) {
        return new BusStops(name, null);
    }
}
