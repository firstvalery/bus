/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.bus.postgres.Indexes;
import ru.smartsarov.bus.postgres.Keys;
import ru.smartsarov.bus.postgres.Public;
import ru.smartsarov.bus.postgres.tables.records.TechAvailabilityRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TechAvailability extends TableImpl<TechAvailabilityRecord> {

    private static final long serialVersionUID = 1167404783;

    /**
     * The reference instance of <code>public.tech_availability</code>
     */
    public static final TechAvailability TECH_AVAILABILITY = new TechAvailability();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TechAvailabilityRecord> getRecordType() {
        return TechAvailabilityRecord.class;
    }

    /**
     * The column <code>public.tech_availability.bus_id</code>.
     */
    public final TableField<TechAvailabilityRecord, Integer> BUS_ID = createField("bus_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tech_availability.date</code>.
     */
    public final TableField<TechAvailabilityRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.tech_availability.bus_condition_id</code>.
     */
    public final TableField<TechAvailabilityRecord, Short> BUS_CONDITION_ID = createField("bus_condition_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.tech_availability.removed</code>.
     */
    public final TableField<TechAvailabilityRecord, Short> REMOVED = createField("removed", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * Create a <code>public.tech_availability</code> table reference
     */
    public TechAvailability() {
        this(DSL.name("tech_availability"), null);
    }

    /**
     * Create an aliased <code>public.tech_availability</code> table reference
     */
    public TechAvailability(String alias) {
        this(DSL.name(alias), TECH_AVAILABILITY);
    }

    /**
     * Create an aliased <code>public.tech_availability</code> table reference
     */
    public TechAvailability(Name alias) {
        this(alias, TECH_AVAILABILITY);
    }

    private TechAvailability(Name alias, Table<TechAvailabilityRecord> aliased) {
        this(alias, aliased, null);
    }

    private TechAvailability(Name alias, Table<TechAvailabilityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TechAvailability(Table<O> child, ForeignKey<O, TechAvailabilityRecord> key) {
        super(child, key, TECH_AVAILABILITY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_TECH_AVAILABILITY_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TechAvailabilityRecord> getPrimaryKey() {
        return Keys.PK_TECH_AVAILABILITY_TBL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TechAvailabilityRecord>> getKeys() {
        return Arrays.<UniqueKey<TechAvailabilityRecord>>asList(Keys.PK_TECH_AVAILABILITY_TBL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TechAvailabilityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TechAvailabilityRecord, ?>>asList(Keys.TECH_AVAILABILITY__FK__TECH_AVAILABILITY_TBL_BUS_ID, Keys.TECH_AVAILABILITY__FK_TECH_AVAILABILITY_TBL_BUS_CONDITION_ID);
    }

    public Bus bus() {
        return new Bus(this, Keys.TECH_AVAILABILITY__FK__TECH_AVAILABILITY_TBL_BUS_ID);
    }

    public RbBusConditionType rbBusConditionType() {
        return new RbBusConditionType(this, Keys.TECH_AVAILABILITY__FK_TECH_AVAILABILITY_TBL_BUS_CONDITION_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TechAvailability as(String alias) {
        return new TechAvailability(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TechAvailability as(Name alias) {
        return new TechAvailability(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TechAvailability rename(String name) {
        return new TechAvailability(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TechAvailability rename(Name name) {
        return new TechAvailability(name, null);
    }
}
