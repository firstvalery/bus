/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.bus.postgres.tables.records;


import java.sql.Date;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import ru.smartsarov.bus.postgres.tables.ConductorSchedule;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConductorScheduleRecord extends UpdatableRecordImpl<ConductorScheduleRecord> implements Record4<Short, Date, Short, Short> {

    private static final long serialVersionUID = 1880473855;

    /**
     * Setter for <code>public.conductor_schedule.conductor_id</code>.
     */
    public void setConductorId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.conductor_schedule.conductor_id</code>.
     */
    public Short getConductorId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>public.conductor_schedule.date</code>.
     */
    public void setDate(Date value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.conductor_schedule.date</code>.
     */
    public Date getDate() {
        return (Date) get(1);
    }

    /**
     * Setter for <code>public.conductor_schedule.shift_type_id</code>.
     */
    public void setShiftTypeId(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.conductor_schedule.shift_type_id</code>.
     */
    public Short getShiftTypeId() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>public.conductor_schedule.removed</code>.
     */
    public void setRemoved(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.conductor_schedule.removed</code>.
     */
    public Short getRemoved() {
        return (Short) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<Short, Date> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Short, Date, Short, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Short, Date, Short, Short> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field1() {
        return ConductorSchedule.CONDUCTOR_SCHEDULE.CONDUCTOR_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Date> field2() {
        return ConductorSchedule.CONDUCTOR_SCHEDULE.DATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field3() {
        return ConductorSchedule.CONDUCTOR_SCHEDULE.SHIFT_TYPE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field4() {
        return ConductorSchedule.CONDUCTOR_SCHEDULE.REMOVED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component1() {
        return getConductorId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date component2() {
        return getDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component3() {
        return getShiftTypeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component4() {
        return getRemoved();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value1() {
        return getConductorId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date value2() {
        return getDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value3() {
        return getShiftTypeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value4() {
        return getRemoved();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConductorScheduleRecord value1(Short value) {
        setConductorId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConductorScheduleRecord value2(Date value) {
        setDate(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConductorScheduleRecord value3(Short value) {
        setShiftTypeId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConductorScheduleRecord value4(Short value) {
        setRemoved(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConductorScheduleRecord values(Short value1, Date value2, Short value3, Short value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConductorScheduleRecord
     */
    public ConductorScheduleRecord() {
        super(ConductorSchedule.CONDUCTOR_SCHEDULE);
    }

    /**
     * Create a detached, initialised ConductorScheduleRecord
     */
    public ConductorScheduleRecord(Short conductorId, Date date, Short shiftTypeId, Short removed) {
        super(ConductorSchedule.CONDUCTOR_SCHEDULE);

        set(0, conductorId);
        set(1, date);
        set(2, shiftTypeId);
        set(3, removed);
    }
}
